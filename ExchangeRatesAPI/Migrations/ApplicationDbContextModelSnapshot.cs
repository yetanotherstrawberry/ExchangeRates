// <auto-generated />
using System;
using ExchangeRatesAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExchangeRatesAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExchangeRatesAPI.Models.ApiKey", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("Key");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denominator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExchangeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeDate");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Exchange", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Date");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("apiKeyKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("currencyCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyDenomCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestDate");

                    b.HasIndex("apiKeyKey");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Currency", b =>
                {
                    b.HasOne("ExchangeRatesAPI.Models.Exchange", null)
                        .WithMany("Currencies")
                        .HasForeignKey("ExchangeDate");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.ExchangeRate", b =>
                {
                    b.HasOne("ExchangeRatesAPI.Models.Currency", null)
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Request", b =>
                {
                    b.HasOne("ExchangeRatesAPI.Models.ApiKey", "apiKey")
                        .WithMany()
                        .HasForeignKey("apiKeyKey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("apiKey");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Currency", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("ExchangeRatesAPI.Models.Exchange", b =>
                {
                    b.Navigation("Currencies");
                });
#pragma warning restore 612, 618
        }
    }
}
